/*
 *  jDTAUS - DTAUS fileformat.
 *  Copyright (c) 2005 Christian Schulte <cs@schulte.it>
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */
package org.jdtaus.core.client.util.spi;

import java.io.File;
import org.jdtaus.core.client.util.Application;
import org.jdtaus.core.container.ContainerInitializer;
import org.jdtaus.core.container.Dependency;
import org.jdtaus.core.container.Implementation;
import org.jdtaus.core.container.ModelFactory;
import org.jdtaus.core.container.Properties;
import org.jdtaus.core.container.Property;
import org.jdtaus.core.container.PropertyException;

/**
 * {@code Application} reference implementation.
 *
 * @author <a href="mailto:cs@schulte.it">Christian Schulte</a>
 * @version $Id$
 */
public class DefaultApplication implements Application, ContainerInitializer
{

    //--Implementation----------------------------------------------------------

    // This section is generated by jdtaus-source-plugin.

    /** Meta-data describing the implementation. */
    private static final Implementation META =
        ModelFactory.getModel().getModules().
        getImplementation(DefaultApplication.class.getName());

    //----------------------------------------------------------Implementation--
    //--Constructors------------------------------------------------------------

    // This section is generated by jdtaus-source-plugin.

    /**
     * Protected <code>DefaultApplication</code> implementation constructor.
     *
     * @param meta Implementation meta-data.
     *
     * @throws NullPointerException if <code>meta</code> is <code>null</code>.
     */
    protected DefaultApplication(final Implementation meta)
    {
        super();
        if(meta == null)
        {
            throw new NullPointerException("meta");
        }
        this.initializeProperties(meta.getProperties());
    }
    /**
     * Protected <code>DefaultApplication</code> dependency constructor.
     *
     * @param meta dependency meta-data.
     *
     * @throws NullPointerException if <code>meta</code> is <code>null</code>.
     */
    protected DefaultApplication(final Dependency meta)
    {
        super();
        if(meta == null)
        {
            throw new NullPointerException("meta");
        }
        this.initializeProperties(meta.getProperties());
    }

    /**
     * Initializes the properties of the instance.
     *
     * @param meta the property values to initialize the instance with.
     *
     * @throws NullPointerException if {@code meta} is {@code null}.
     */
    protected void initializeProperties(final Properties meta)
    {
        Property p;

        if(meta == null)
        {
            throw new NullPointerException("meta");
        }

        p = meta.getProperty("stateDirectoryName");
        this._stateDirectoryName = (java.lang.String) p.getValue();


        p = meta.getProperty("dataDirectoryName");
        this._dataDirectoryName = (java.lang.String) p.getValue();


        p = meta.getProperty("configDirectoryName");
        this._configDirectoryName = (java.lang.String) p.getValue();


        p = meta.getProperty("binDirectoryName");
        this._binDirectoryName = (java.lang.String) p.getValue();

    }

    //------------------------------------------------------------Constructors--
    //--ContainerInitializer----------------------------------------------------

    /**
     * Checks configured property values by calling
     * {@link #assertValidProperties()}.
     *
     * @throws PropertyException for properties with invalid values.
     */
    public void initialize()
    {
        this.assertValidProperties();
    }

    //----------------------------------------------------ContainerInitializer--
    //--Dependencies------------------------------------------------------------

    // This section is generated by jdtaus-source-plugin.


    //------------------------------------------------------------Dependencies--
    //--Properties--------------------------------------------------------------

    // This section is generated by jdtaus-source-plugin.

    /**
     * Property {@code stateDirectoryName}.
     * @serial
     */
    private java.lang.String _stateDirectoryName;

    /**
     * Gets the value of property <code>stateDirectoryName</code>.
     *
     * @return the value of property <code>stateDirectoryName</code>.
     */
    protected java.lang.String getStateDirectoryName()
    {
        return this._stateDirectoryName;
    }

    /**
     * Property {@code dataDirectoryName}.
     * @serial
     */
    private java.lang.String _dataDirectoryName;

    /**
     * Gets the value of property <code>dataDirectoryName</code>.
     *
     * @return the value of property <code>dataDirectoryName</code>.
     */
    protected java.lang.String getDataDirectoryName()
    {
        return this._dataDirectoryName;
    }

    /**
     * Property {@code configDirectoryName}.
     * @serial
     */
    private java.lang.String _configDirectoryName;

    /**
     * Gets the value of property <code>configDirectoryName</code>.
     *
     * @return the value of property <code>configDirectoryName</code>.
     */
    protected java.lang.String getConfigDirectoryName()
    {
        return this._configDirectoryName;
    }

    /**
     * Property {@code binDirectoryName}.
     * @serial
     */
    private java.lang.String _binDirectoryName;

    /**
     * Gets the value of property <code>binDirectoryName</code>.
     *
     * @return the value of property <code>binDirectoryName</code>.
     */
    protected java.lang.String getBinDirectoryName()
    {
        return this._binDirectoryName;
    }


    //--------------------------------------------------------------Properties--
    //--Application-------------------------------------------------------------

    public final File getBinDirectory()
    {
        final File ret = new File(this.getBaseDirectory(),
            this.getBinDirectoryName());

        if(!ret.exists())
        {
            ret.mkdirs();
        }

        return ret;
    }

    public final File getConfigDirectory()
    {
        final File ret = new File(this.getBaseDirectory(),
            this.getConfigDirectoryName());

        if(!ret.exists())
        {
            ret.mkdirs();
        }

        return ret;
    }

    public final File getDataDirectory()
    {
        final File ret = new File(this.getBaseDirectory(),
            this.getDataDirectoryName());

        if(!ret.exists())
        {
            ret.mkdirs();
        }

        return ret;
    }

    public final File getStateDirectory()
    {
        final File ret = new File(this.getBaseDirectory(),
            this.getStateDirectoryName());

        if(!ret.exists())
        {
            ret.mkdirs();
        }

        return ret;
    }

    //-------------------------------------------------------------Application--
    //--DefaultApplication------------------------------------------------------

    /** Name of the system property holding the path of the base directory. */
    private static final String SYS_BASEDIRECTORY =
        DefaultApplication.class.getName() + ".baseDirectory";

    /** Creates a new {@code DefaultApplication} instance. */
    public DefaultApplication()
    {
        this(DefaultApplication.META);
        this.initialize();
    }

    /**
     * Gets the base directory of the application.
     * <p>By default the base directory of the application is the directory
     * denoted by the system property {@code user.home}. If a system property
     * with name {@code org.jdtaus.core.client.spi.DefaultApplication.baseDirectory}
     * exists its value is interpretated as an absolute path to the base
     * directory.</p>
     *
     * @return the base directory of the application.
     */
    protected File getBaseDirectory()
    {
        final File file;
        final String path =
            System.getProperty(DefaultApplication.SYS_BASEDIRECTORY,
            System.getProperty("user.home"));

        assert path != null : "Expected system property user.home to exist.";

        return new File(path);
    }

    /**
     * Checks configured properties.
     *
     * @throws PropertyException for invalid property values.
     */
    protected void assertValidProperties()
    {
        if(this.getBinDirectoryName() == null ||
            this.getBinDirectoryName().length() == 0)
        {
            throw new PropertyException("binDirectoryName", null);
        }
        if(this.getConfigDirectoryName() == null ||
            this.getConfigDirectoryName().length() == 0)
        {
            throw new PropertyException("configDirectoryName", null);
        }
        if(this.getDataDirectoryName() == null ||
            this.getDataDirectoryName().length() == 0)
        {
            throw new PropertyException("dataDirectoryName", null);
        }
        if(this.getStateDirectoryName() == null ||
            this.getStateDirectoryName().length() == 0)
        {
            throw new PropertyException("stateDirectoryName", null);
        }
    }

    //------------------------------------------------------DefaultApplication--

}
