/*
 *  jDTAUS - DTAUS fileformat.
 *  Copyright (c) 2005 Christian Schulte <cs@schulte.it>
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */
package org.jdtaus.core.client.util.spi;

import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import javax.swing.ImageIcon;
import org.jdtaus.core.client.util.IconSet;
import org.jdtaus.core.container.ContainerInitializer;
import org.jdtaus.core.container.Dependency;
import org.jdtaus.core.container.Implementation;
import org.jdtaus.core.container.ImplementationException;
import org.jdtaus.core.container.ModelFactory;
import org.jdtaus.core.container.Properties;
import org.jdtaus.core.container.Property;
import org.jdtaus.core.container.PropertyException;

/**
 * {@code IconSet} reference implementation.
 *
 * @author <a href="mailto:cs@schulte.it">Christian Schulte</a>
 * @version $Id$
 */
public class DefaultIconSet implements IconSet, ContainerInitializer
{

    //--Constants---------------------------------------------------------------

    /** All supported icons by this implementation. */
    private static final String[] SUPPORTED_ICONS = {
        IconSet.DEV_APPLET, IconSet.DEV_APPLICATION,
        IconSet.DEV_DEPLOY_APPLICATION, IconSet.DEV_BEAN, IconSet.DEV_BEAN_ADD,
        IconSet.DEV_EJB, IconSet.DEV_EJB_JAR, IconSet.DEV_HOST,
        IconSet.DEV_J2EE_APPLICATION, IconSet.DEV_J2EE_APP_CLIENT,
        IconSet.DEV_J2EE_APP_CLIENT_ADD, IconSet.DEV_J2EE_SERVER,
        IconSet.DEV_JAR, IconSet.DEV_JAR_ADD, IconSet.DEV_SERVER,
        IconSet.DEV_WAR, IconSet.DEV_WAR_ADD, IconSet.MEDIA_FAST_FORWARD,
        IconSet.MEDIA_MOVIE, IconSet.MEDIA_PAUSE, IconSet.MEDIA_PLAY,
        IconSet.MEDIA_REWIND, IconSet.MEDIA_STEP_BACK,
        IconSet.MEDIA_STEP_FORWARD, IconSet.MEDIA_STOP, IconSet.MEDIA_VOLUME,
        IconSet.NAV_BACK, IconSet.NAV_DOWN, IconSet.NAV_FORWARD,
        IconSet.NAV_HOME, IconSet.NAV_UP, IconSet.TAB_COLUMN_DELETE,
        IconSet.TAB_COLUMN_INSERT_AFTER, IconSet.TAB_COLUMN_INSERT_BEFORE,
        IconSet.TAB_ROW_DELETE, IconSet.TAB_ROW_INSERT_AFTER,
        IconSet.TAB_ROW_INSERT_BEFORE, IconSet.TXT_ALIGN_CENTER,
        IconSet.TXT_ALIGN_JUSTIFY, IconSet.TXT_ALIGN_LEFT,
        IconSet.TXT_ALIGN_RIGHT, IconSet.TXT_BOLD, IconSet.TXT_ITALIC,
        IconSet.TXT_NORMAL, IconSet.TXT_UNDERLINE, IconSet.ABOUT,
        IconSet.ADD, IconSet.ALIGN_BOTTOM, IconSet.ALIGN_CENTER,
        IconSet.ALIGN_JUSTIFY_HORIZONTAL, IconSet.ALIGN_JUSTIFY_VERTICAL,
        IconSet.ALIGN_LEFT, IconSet.ALIGN_RIGHT, IconSet.ALIGN_TOP,
        IconSet.BOOKMARKS, IconSet.COMPOSE_MAIL, IconSet.CONTEXTUAL_HELP,
        IconSet.COPY, IconSet.CUT, IconSet.DELETE, IconSet.EDIT,
        IconSet.EXPORT, IconSet.FIND, IconSet.FIND_AGAIN, IconSet.HELP,
        IconSet.HISTORY, IconSet.IMPORT, IconSet.INFORMATION, IconSet.NEW,
        IconSet.OPEN, IconSet.PAGE_SETUP, IconSet.PASTE, IconSet.PREFERENCES,
        IconSet.PRINT, IconSet.PRINT_PREVIEW, IconSet.PROPERTIES,
        IconSet.REDO, IconSet.REFRESH, IconSet.REMOVE, IconSet.REPLACE,
        IconSet.SAVE, IconSet.SAVE_ALL, IconSet.SAVE_AS, IconSet.SEARCH,
        IconSet.SEND_MAIL, IconSet.STOP, IconSet.TIP_OF_THE_DAY, IconSet.UNDO,
        IconSet.ZOOM, IconSet.ZOOM_IN, IconSet.ZOOM_OUT
    };

    //---------------------------------------------------------------Constants--
    //--Implementation----------------------------------------------------------

    // This section is generated by jdtaus-source-plugin.

    /** Meta-data describing the implementation. */
    private static final Implementation META =
        ModelFactory.getModel().getModules().
        getImplementation(DefaultIconSet.class.getName());

    //----------------------------------------------------------Implementation--
    //--Constructors------------------------------------------------------------

    // This section is generated by jdtaus-source-plugin.

    /**
     * Protected <code>DefaultIconSet</code> implementation constructor.
     *
     * @param meta Implementation meta-data.
     *
     * @throws NullPointerException if <code>meta</code> is <code>null</code>.
     */
    protected DefaultIconSet(final Implementation meta)
    {
        super();
        if(meta == null)
        {
            throw new NullPointerException("meta");
        }
        this.initializeProperties(meta.getProperties());
    }
    /**
     * Protected <code>DefaultIconSet</code> dependency constructor.
     *
     * @param meta dependency meta-data.
     *
     * @throws NullPointerException if <code>meta</code> is <code>null</code>.
     */
    protected DefaultIconSet(final Dependency meta)
    {
        super();
        if(meta == null)
        {
            throw new NullPointerException("meta");
        }
        this.initializeProperties(meta.getProperties());
    }

    /**
     * Initializes the properties of the instance.
     *
     * @param meta the property values to initialize the instance with.
     *
     * @throws NullPointerException if {@code meta} is {@code null}.
     */
    protected void initializeProperties(final Properties meta)
    {
        Property p;

        if(meta == null)
        {
            throw new NullPointerException("meta");
        }

        p = meta.getProperty("configurationBundle");
        this._configurationBundle = (java.lang.String) p.getValue();

    }

    //------------------------------------------------------------Constructors--
    //--ContainerInitializer----------------------------------------------------

    /**
     * Checks configured property values by calling
     * {@link #assertValidProperties()}.
     *
     * @throws PropertyException for properties with invalid values.
     * @throws ImplementationException if the configuration cannot be used.
     */
    public void initialize()
    {
        this.assertValidProperties();
    }

    //----------------------------------------------------ContainerInitializer--
    //--Dependencies------------------------------------------------------------

    // This section is generated by jdtaus-source-plugin.


    //------------------------------------------------------------Dependencies--
    //--Properties--------------------------------------------------------------

    // This section is generated by jdtaus-source-plugin.

    /**
     * Property {@code configurationBundle}.
     * @serial
     */
    private java.lang.String _configurationBundle;

    /**
     * Gets the value of property <code>configurationBundle</code>.
     *
     * @return the value of property <code>configurationBundle</code>.
     */
    public java.lang.String getConfigurationBundle()
    {
        return this._configurationBundle;
    }


    //--------------------------------------------------------------Properties--
    //--IconSet-----------------------------------------------------------------

    /** Cached icons. */
    private Map iconCache = new HashMap();

    public String[] getSupportedIcons()
    {
        return DefaultIconSet.SUPPORTED_ICONS;
    }

    public final ImageIcon getIcon(final String name, final String size,
        Locale locale)
    {

        if(!this.checkIconSupported(name))
        {
            throw new IllegalArgumentException(name);
        }

        if(!(size != null && (IconSet.SIZE_16X16.equals(size) ||
            IconSet.SIZE_24X24.equals(size))))
        {
            throw new IllegalArgumentException(size);
        }

        ImageIcon ret;
        final String cacheKey = name + '.' + size + '.' + locale;
        ret = (ImageIcon) this.iconCache.get(cacheKey);
        if(ret == null)
        {
            ret = this.loadIcon(name, size, locale);
            this.iconCache.put(cacheKey, ret);
        }

        return ret;
    }

    /**
     * Implementation to load an icon.
     *
     * @param name logical icon name of the icon to load.
     * @param size size of the icon to load.
     * @param locale the locale for the description of the icon or {@code null}
     * for {@code Locale.getDefault()}.
     *
     * @return the icon identified by {@code name} sized {@code size}.
     *
     * @throws IllegalArgumentException if {@code name} is not supported or
     * {@code size} is no legal size constant.
     *
     * @see IconSet#SIZE_16X16
     * @see IconSet#SIZE_24X24
     */
    protected ImageIcon loadIcon(final String name, final String size,
        Locale locale)
    {
        if(!this.checkIconSupported(name))
        {
            throw new IllegalArgumentException(name);
        }
        if(!(size != null && (IconSet.SIZE_16X16.equals(size) ||
            IconSet.SIZE_24X24.equals(size))))
        {
            throw new IllegalArgumentException(size);
        }

        if(locale == null)
        {
            locale = Locale.getDefault();
        }

        ClassLoader classLoader =
            Thread.currentThread().getContextClassLoader();

        if(classLoader == null)
        {
            classLoader = ClassLoader.getSystemClassLoader();
        }

        if(classLoader == null)
        {
            throw new ImplementationException(META,
                new IllegalStateException("classLoader"));

        }

        String location = this.getConfiguration(locale).
            getString(name + '.' + size);

        final String description = this.getConfiguration(locale).
            getString(name + ".description");

        if(location.charAt(0) == '/')
        {
            location = location.substring(1);
        }

        return new ImageIcon(classLoader.getResource(location),
            description);

    }

    //-----------------------------------------------------------------IconSet--
    //--DefaultIconSet----------------------------------------------------------

    /** Creates a new {@code DefaultIconSet} instance. */
    public DefaultIconSet()
    {
        this(DefaultIconSet.META);
        this.initialize();
    }

    /**
     * Checks configured properties.
     *
     * @throws PropertyException for properties with invalid values.
     * @throws ImplementationException if the configuration cannot be used.
     */
    protected void assertValidProperties()
    {
        if(this.getConfigurationBundle() == null)
        {
            throw new PropertyException("configurationBundle", null);
        }
        this.getConfiguration(null);
    }

    /**
     * Checks that an icon identified by {@code name} is supported by an
     * implementation.
     *
     * @param name the logical name of the icon to check support for.
     *
     * @return {@code true} if {@code name} is supported by an implementation;
     * {@code false} if not.
     */
    protected final boolean checkIconSupported(final String name)
    {
        boolean ret = name != null;

        final String[] supported = this.getSupportedIcons();
        if(ret)
        {
            for(int i = supported.length - 1; i >= 0; i--)
            {
                if(supported[i].equals(name))
                {
                    ret = true;
                    break;
                }
            }
        }

        return ret;
    }

    /**
     * Gets the configuration resource bundle.
     *
     * @return the configuration resource bundle.
     *
     * @throws ImplementationException if property {@code configurationBundle}
     * points to an invalid bundle.
     */
    protected ResourceBundle getConfiguration(Locale locale)
    {
        if(locale == null)
        {
            locale = Locale.getDefault();
        }

        ClassLoader classLoader =
            Thread.currentThread().getContextClassLoader();

        if(classLoader == null)
        {
            classLoader = ClassLoader.getSystemClassLoader();
        }

        if(classLoader == null)
        {
            throw new ImplementationException(META,
                new NullPointerException("classLoader"));

        }

        try
        {
            return ResourceBundle.getBundle(this.getConfigurationBundle(),
                locale, classLoader);

        }
        catch(MissingResourceException e)
        {
            throw new ImplementationException(META, e);
        }
    }

    //----------------------------------------------------------DefaultIconSet--

}
