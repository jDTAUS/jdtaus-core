  -----
Anwendungsbeispiele
  -----
Christian Schulte
  -----
October 2012
  -----

Anwendungsbeispiele

* Verwaltung von Quelltextabschnitten

  Die <<<java-container>>>, <<<java-container-tests>>>, <<<java-commit>>> und
  <<<java-commit-tests>>> Kommandos des Plugins werden in einem Eltern-POM
  eines multi-modul Projekts wie folgt konfiguriert. Für jedes Projekt, für das
  die als Abhängigkeit des Plugins konfigurierte Container-Implementierung
  Modelldaten ermittelt, verwaltet das Plugin Quelltextabschnitte auf Basis
  dieser Modelldaten.

  XML-Schema: {{{http://xml.jdtaus.org/1.0.x/jdtaus-core/jdtaus-core-schemas/jdtaus-container-1.1.xsd}jdtaus-container-1.1.xsd}}
  Ort entsprechender Dokumente: <<<META-INF/jdtaus/module.xml>>>

+---
...
<build>
  ...
  <pluginManagement>
    <plugins>
      ...
      <plugin>
        <groupId>org.jdtaus.mojo</groupId>
        <artifactId>jdtaus-container-mojo</artifactId>
        <version>${jdtaus-container-mojo.artifact.version}</version>
        <dependencies>
          <dependency>
            <groupId>org.jdtaus.core.container</groupId>
            <artifactId>jdtaus-core-client-container</artifactId>
            <version>${core.version}</version>
          </dependency>
        </dependencies>
        <executions>
          <execution>
            <id>remove-trailing-spaces</id>
            <phase>validate</phase>
            <inherited>true</inherited>
            <goals>
              <goal>clean-sources</goal>
            </goals>
          </execution>
          <execution>
            <id>manage-main</id>
            <inherited>true</inherited>
            <goals>
              <goal>java-container</goal>
            </goals>
          </execution>
          <execution>
            <id>manage-tests</id>
            <inherited>true</inherited>
            <goals>
              <goal>java-container-tests</goal>
            </goals>
          </execution>
          <execution>
            <id>commit-main</id>
            <inherited>true</inherited>
            <goals>
              <goal>java-commit</goal>
            </goals>
          </execution>
          <execution>
            <id>commit-tests</id>
            <inherited>true</inherited>
            <goals>
              <goal>java-commit-tests</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <locale>en</locale>
          <encoding>UTF-8</encoding>
        </configuration>
      </plugin>
      ...
    </plugins>
  </pluginManagement>
  ..
  <plugins>
    ...
    <plugin>
      <groupId>org.jdtaus.mojo</groupId>
      <artifactId>jdtaus-container-mojo</artifactId>
    </plugin>
    ...
  </plugins>
  ...
</build>
+---

  <<Hinweis:>> Die Standardwerte der Pluginparameter erfordern die folgenden
  Abschnittsmarkierungen in Quelltextdateien. Nicht existierende Dateien werden
  im über den <<<sourceRoot>>> Parameter des Plugins konfigurierten Verzeichnis
  erstellt.

+---
    //--Constructors------------------------------------------------------------
    //------------------------------------------------------------Constructors--
    //--Dependencies------------------------------------------------------------
    //------------------------------------------------------------Dependencies--
    //--Properties--------------------------------------------------------------
    //--------------------------------------------------------------Properties--
    //--Messages----------------------------------------------------------------
    //----------------------------------------------------------------Messages--
+---

* Entfernung nachfolgender Leerzeichen in Quelltextdateien

  Das <<<jdtaus-container-mojo:clean-sources>>> Kommando des Plugins ist an
  keine Phase gebunden. Es wird entweder unabghängig oder in einem Eltern-POM
  eines multi-modul Projekts verwendet.

  Um nachfolgende Leerzeichen aus den Quelltextdateien eines Projekts zu
  entfernen, führen Sie folgendes Kommando im Basisverzeichnis des Projekts
  aus.

+---
  mvn org.jdtaus.mojo:jdtaus-container-mojo:clean-sources
+---

* Validierung des Container-Modells einer Menge von Artefakten

  Das <<<jdtaus-container-mojo:verify-model>>> Kommando des Container Plugins
  ist an die <<<verify>>> Phase gebunden. Es kommt in Projekten zur Erstellung
  einer finalen Auslieferungseinheit zum Einsatz um die Erstellung bei
  ungültigen Modelldaten entsprechend abzubrechen.

  Konfigurieren Sie das Plugin wie folgt, um das Kommando auszuführen.

+---
...
<build>
  <plugins>
    ...
    <plugin>
      <groupId>org.jdtaus.mojo</groupId>
      <artifactId>jdtaus-container-mojo</artifactId>
      <version>${jdtaus-container-mojo.artifact.version}</version>
      <dependencies>
        <dependency>
          <groupId>org.jdtaus.core.container</groupId>
          <artifactId>jdtaus-core-client-container</artifactId>
          <version>${core.version}</version>
        </dependency>
      </dependencies>
      <executions>
        <execution>
          <id>verify-model</id>
          <goals>
            <goal>verify-model</goal>
          </goals>
        </execution>
      </executions>
    </plugin>
    ...
  <plugins>
</build>
...
+---

* Validierung des Container-Modells eines einzelnen Java-Archivs

  Das <<<jdtaus-container-mojo:verify-jar>>> Kommando des Container Plugins ist
  an die <<<verify>>> Phase gebunden. Es wird zur Validierung des Container
  Modells eines einzelnen Java-Archivs verwendet.

  Konfigurieren Sie das Plugin wie folgt, um das Kommando auszuführen. Mittels
  des 'jarFile' Parameters kann das zu validierende Java-Archiv entsprechend
  angegeben werden.

+---
...
<build>
  <plugins>
    ...
    <plugin>
      <groupId>org.jdtaus.mojo</groupId>
      <artifactId>jdtaus-container-mojo</artifactId>
      <version>${jdtaus-container-mojo.artifact.version}</version>
      <dependencies>
        <dependency>
          <groupId>org.jdtaus.core.container</groupId>
          <artifactId>jdtaus-core-client-container</artifactId>
          <version>${core.version}</version>
        </dependency>
      </dependencies>
      <executions>
        <execution>
          <id>verify-jar</id>
          <goals>
            <goal>verify-jar</goal>
          </goals>
          <configuration>
            <jarFile>${project.build.directory}/${project.build.finalName}.jar</jarFile>
          </configuration>
        </execution>
      </executions>
    </plugin>
    ...
  <plugins>
</build>
...
+---

* Erstellung eines Spring-Beans Dokuments aus einem Container-Modell

  Das <<<jdtaus-container-mojo:spring-descriptor>>> Kommando des Container
  Plugins ist an die <<<process-resources>>> Phase gebunden. Es wird verwendet
  um ein Spring-Beans Dokument aus einem Container-Modell zu erstellen.

  Konfigurieren Sie das Plugin wie folgt, um das Kommando auszuführen.

+---
...
<build>
  <plugins>
    ...
    <plugin>
      <groupId>org.jdtaus.mojo</groupId>
      <artifactId>jdtaus-container-mojo</artifactId>
      <version>${jdtaus-container-mojo.artifact.version}</version>
      <dependencies>
        <dependency>
          <groupId>org.jdtaus.core.container</groupId>
          <artifactId>jdtaus-core-client-container</artifactId>
          <version>${core.version}</version>
        </dependency>
      </dependencies>
      <executions>
        <execution>
          <id>spring-descriptor</id>
          <goals>
            <goal>spring-descriptor</goal>
          </goals>
        </execution>
      </executions>
    </plugin>
    ...
  <plugins>
</build>
...
+---

  <<Hinweis:>> Das erstellte Spring-Beans Dokument dient der Vereinfachung der
  Verwendung von auf dem jDTAUS Container basierenden Klassen mit einem
  Spring-Beans Container. Die Klassen benötigen weiterhin eine entsprechende
  jDTAUS Container-Implementierung.
